/*******************************************************************************
 * Copyright (C) 2017-2023 Theodore Chang
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

#include "OutputType.h"
#include <Toolbox/utility.h>

const char* to_name(const OutputType L) {
    if(OutputType::S == L) return "S";
    if(OutputType::S11 == L) return "S11";
    if(OutputType::S12 == L) return "S12";
    if(OutputType::S13 == L) return "S13";
    if(OutputType::S22 == L) return "S22";
    if(OutputType::S23 == L) return "S23";
    if(OutputType::S33 == L) return "S33";
    if(OutputType::E == L) return "E";
    if(OutputType::E11 == L) return "E11";
    if(OutputType::E12 == L) return "E12";
    if(OutputType::E13 == L) return "E13";
    if(OutputType::E22 == L) return "E22";
    if(OutputType::E23 == L) return "E23";
    if(OutputType::E33 == L) return "E33";
    if(OutputType::EE == L) return "EE";
    if(OutputType::EE11 == L) return "EE11";
    if(OutputType::EE12 == L) return "EE12";
    if(OutputType::EE13 == L) return "EE13";
    if(OutputType::EE22 == L) return "EE22";
    if(OutputType::EE23 == L) return "EE23";
    if(OutputType::EE33 == L) return "EE33";
    if(OutputType::PE == L) return "PE";
    if(OutputType::PE11 == L) return "PE11";
    if(OutputType::PE12 == L) return "PE12";
    if(OutputType::PE13 == L) return "PE13";
    if(OutputType::PE22 == L) return "PE22";
    if(OutputType::PE23 == L) return "PE23";
    if(OutputType::PE33 == L) return "PE33";
    if(OutputType::SP == L) return "SP";
    if(OutputType::SP1 == L) return "SP1";
    if(OutputType::SP2 == L) return "SP2";
    if(OutputType::SP3 == L) return "SP3";
    if(OutputType::EP == L) return "EP";
    if(OutputType::EP1 == L) return "EP1";
    if(OutputType::EP2 == L) return "EP2";
    if(OutputType::EP3 == L) return "EP3";
    if(OutputType::EEP == L) return "EEP";
    if(OutputType::EEP1 == L) return "EEP1";
    if(OutputType::EEP2 == L) return "EEP2";
    if(OutputType::EEP3 == L) return "EEP3";
    if(OutputType::PEP == L) return "PEP";
    if(OutputType::PEP1 == L) return "PEP1";
    if(OutputType::PEP2 == L) return "PEP2";
    if(OutputType::PEP3 == L) return "PEP3";
    if(OutputType::U == L) return "U";
    if(OutputType::U1 == L) return "U1";
    if(OutputType::U2 == L) return "U2";
    if(OutputType::U3 == L) return "U3";
    if(OutputType::U4 == L) return "U4";
    if(OutputType::U5 == L) return "U5";
    if(OutputType::U6 == L) return "U6";
    if(OutputType::UR1 == L) return "UR1";
    if(OutputType::UR2 == L) return "UR2";
    if(OutputType::UR3 == L) return "UR3";
    if(OutputType::V == L) return "V";
    if(OutputType::V1 == L) return "V1";
    if(OutputType::V2 == L) return "V2";
    if(OutputType::V3 == L) return "V3";
    if(OutputType::V4 == L) return "V4";
    if(OutputType::V5 == L) return "V5";
    if(OutputType::V6 == L) return "V6";
    if(OutputType::VR1 == L) return "VR1";
    if(OutputType::VR2 == L) return "VR2";
    if(OutputType::VR3 == L) return "VR3";
    if(OutputType::A == L) return "A";
    if(OutputType::A1 == L) return "A1";
    if(OutputType::A2 == L) return "A2";
    if(OutputType::A3 == L) return "A3";
    if(OutputType::A4 == L) return "A4";
    if(OutputType::A5 == L) return "A5";
    if(OutputType::A6 == L) return "A6";
    if(OutputType::AR1 == L) return "AR1";
    if(OutputType::AR2 == L) return "AR2";
    if(OutputType::AR3 == L) return "AR3";
    if(OutputType::MM == L) return "MM";
    if(OutputType::MM1 == L) return "MM1";
    if(OutputType::MM2 == L) return "MM2";
    if(OutputType::MM3 == L) return "MM3";
    if(OutputType::MM4 == L) return "MM4";
    if(OutputType::MM5 == L) return "MM5";
    if(OutputType::MM6 == L) return "MM6";
    if(OutputType::MMR1 == L) return "MMR1";
    if(OutputType::MMR2 == L) return "MMR2";
    if(OutputType::MMR3 == L) return "MMR3";
    if(OutputType::RF == L) return "RF";
    if(OutputType::RF1 == L) return "RF1";
    if(OutputType::RF2 == L) return "RF2";
    if(OutputType::RF3 == L) return "RF3";
    if(OutputType::RF4 == L) return "RF4";
    if(OutputType::RF5 == L) return "RF5";
    if(OutputType::RF6 == L) return "RF6";
    if(OutputType::RM1 == L) return "RM1";
    if(OutputType::RM2 == L) return "RM2";
    if(OutputType::RM3 == L) return "RM3";
    if(OutputType::DF == L) return "DF";
    if(OutputType::DF1 == L) return "DF1";
    if(OutputType::DF2 == L) return "DF2";
    if(OutputType::DF3 == L) return "DF3";
    if(OutputType::DF4 == L) return "DF4";
    if(OutputType::DF5 == L) return "DF5";
    if(OutputType::DF6 == L) return "DF6";
    if(OutputType::DM1 == L) return "DM1";
    if(OutputType::DM2 == L) return "DM2";
    if(OutputType::DM3 == L) return "DM3";
    if(OutputType::IF == L) return "IF";
    if(OutputType::IF1 == L) return "IF1";
    if(OutputType::IF2 == L) return "IF2";
    if(OutputType::IF3 == L) return "IF3";
    if(OutputType::IF4 == L) return "IF4";
    if(OutputType::IF5 == L) return "IF5";
    if(OutputType::IF6 == L) return "IF6";
    if(OutputType::IM1 == L) return "IM1";
    if(OutputType::IM2 == L) return "IM2";
    if(OutputType::IM3 == L) return "IM3";
    if(OutputType::GDF == L) return "GDF";
    if(OutputType::GDF1 == L) return "GDF1";
    if(OutputType::GDF2 == L) return "GDF2";
    if(OutputType::GDF3 == L) return "GDF3";
    if(OutputType::GDF4 == L) return "GDF4";
    if(OutputType::GDF5 == L) return "GDF5";
    if(OutputType::GDF6 == L) return "GDF6";
    if(OutputType::GDM1 == L) return "GDM1";
    if(OutputType::GDM2 == L) return "GDM2";
    if(OutputType::GDM3 == L) return "GDM3";
    if(OutputType::GIF == L) return "GIF";
    if(OutputType::GIF1 == L) return "GIF1";
    if(OutputType::GIF2 == L) return "GIF2";
    if(OutputType::GIF3 == L) return "GIF3";
    if(OutputType::GIF4 == L) return "GIF4";
    if(OutputType::GIF5 == L) return "GIF5";
    if(OutputType::GIF6 == L) return "GIF6";
    if(OutputType::GIM1 == L) return "GIM1";
    if(OutputType::GIM2 == L) return "GIM2";
    if(OutputType::GIM3 == L) return "GIM3";
    if(OutputType::HYDRO == L) return "HYDRO";
    if(OutputType::MISES == L) return "MISES";
    if(OutputType::EEQ == L) return "EEQ";
    if(OutputType::EEEQ == L) return "EEEQ";
    if(OutputType::PEEQ == L) return "PEEQ";
    if(OutputType::KE == L) return "KE";
    if(OutputType::SE == L) return "SE";
    if(OutputType::VE == L) return "VE";
    if(OutputType::NVE == L) return "NVE";
    if(OutputType::K == L) return "K";
    if(OutputType::M == L) return "M";
    if(OutputType::ED == L) return "ED";
    if(OutputType::VD == L) return "VD";
    if(OutputType::SD == L) return "SD";
    if(OutputType::ES == L) return "ES";
    if(OutputType::VS == L) return "VS";
    if(OutputType::SS == L) return "SS";
    if(OutputType::DAMAGE == L) return "DAMAGE";
    if(OutputType::DT == L) return "DT";
    if(OutputType::DC == L) return "DC";
    if(OutputType::PP == L) return "PP";
    if(OutputType::VF == L) return "VF";
    if(OutputType::HIST == L) return "HIST";
    if(OutputType::LITR == L) return "LITR";
    if(OutputType::YF == L) return "YF";
    if(OutputType::BEAME == L) return "BEAME";
    if(OutputType::BEAMS == L) return "BEAMS";
    if(OutputType::AMP == L) return "AMP";

    return "NL";
}

OutputType to_token(const char* L) {
    if(is_equal(L, "S")) return OutputType::S;
    if(is_equal(L, "S11")) return OutputType::S11;
    if(is_equal(L, "S12")) return OutputType::S12;
    if(is_equal(L, "S13")) return OutputType::S13;
    if(is_equal(L, "S22")) return OutputType::S22;
    if(is_equal(L, "S23")) return OutputType::S23;
    if(is_equal(L, "S33")) return OutputType::S33;
    if(is_equal(L, "E")) return OutputType::E;
    if(is_equal(L, "E11")) return OutputType::E11;
    if(is_equal(L, "E12")) return OutputType::E12;
    if(is_equal(L, "E13")) return OutputType::E13;
    if(is_equal(L, "E22")) return OutputType::E22;
    if(is_equal(L, "E23")) return OutputType::E23;
    if(is_equal(L, "E33")) return OutputType::E33;
    if(is_equal(L, "EE")) return OutputType::EE;
    if(is_equal(L, "EE11")) return OutputType::EE11;
    if(is_equal(L, "EE12")) return OutputType::EE12;
    if(is_equal(L, "EE13")) return OutputType::EE13;
    if(is_equal(L, "EE22")) return OutputType::EE22;
    if(is_equal(L, "EE23")) return OutputType::EE23;
    if(is_equal(L, "EE33")) return OutputType::EE33;
    if(is_equal(L, "PE")) return OutputType::PE;
    if(is_equal(L, "PE11")) return OutputType::PE11;
    if(is_equal(L, "PE12")) return OutputType::PE12;
    if(is_equal(L, "PE13")) return OutputType::PE13;
    if(is_equal(L, "PE22")) return OutputType::PE22;
    if(is_equal(L, "PE23")) return OutputType::PE23;
    if(is_equal(L, "PE33")) return OutputType::PE33;
    if(is_equal(L, "SP")) return OutputType::SP;
    if(is_equal(L, "SP1")) return OutputType::SP1;
    if(is_equal(L, "SP2")) return OutputType::SP2;
    if(is_equal(L, "SP3")) return OutputType::SP3;
    if(is_equal(L, "EP")) return OutputType::EP;
    if(is_equal(L, "EP1")) return OutputType::EP1;
    if(is_equal(L, "EP2")) return OutputType::EP2;
    if(is_equal(L, "EP3")) return OutputType::EP3;
    if(is_equal(L, "EEP")) return OutputType::EEP;
    if(is_equal(L, "EEP1")) return OutputType::EEP1;
    if(is_equal(L, "EEP2")) return OutputType::EEP2;
    if(is_equal(L, "EEP3")) return OutputType::EEP3;
    if(is_equal(L, "PEP")) return OutputType::PEP;
    if(is_equal(L, "PEP1")) return OutputType::PEP1;
    if(is_equal(L, "PEP2")) return OutputType::PEP2;
    if(is_equal(L, "PEP3")) return OutputType::PEP3;
    if(is_equal(L, "U")) return OutputType::U;
    if(is_equal(L, "U1")) return OutputType::U1;
    if(is_equal(L, "U2")) return OutputType::U2;
    if(is_equal(L, "U3")) return OutputType::U3;
    if(is_equal(L, "U4")) return OutputType::U4;
    if(is_equal(L, "U5")) return OutputType::U5;
    if(is_equal(L, "U6")) return OutputType::U6;
    if(is_equal(L, "UR1")) return OutputType::UR1;
    if(is_equal(L, "UR2")) return OutputType::UR2;
    if(is_equal(L, "UR3")) return OutputType::UR3;
    if(is_equal(L, "V")) return OutputType::V;
    if(is_equal(L, "V1")) return OutputType::V1;
    if(is_equal(L, "V2")) return OutputType::V2;
    if(is_equal(L, "V3")) return OutputType::V3;
    if(is_equal(L, "V4")) return OutputType::V4;
    if(is_equal(L, "V5")) return OutputType::V5;
    if(is_equal(L, "V6")) return OutputType::V6;
    if(is_equal(L, "VR1")) return OutputType::VR1;
    if(is_equal(L, "VR2")) return OutputType::VR2;
    if(is_equal(L, "VR3")) return OutputType::VR3;
    if(is_equal(L, "A")) return OutputType::A;
    if(is_equal(L, "A1")) return OutputType::A1;
    if(is_equal(L, "A2")) return OutputType::A2;
    if(is_equal(L, "A3")) return OutputType::A3;
    if(is_equal(L, "A4")) return OutputType::A4;
    if(is_equal(L, "A5")) return OutputType::A5;
    if(is_equal(L, "A6")) return OutputType::A6;
    if(is_equal(L, "AR1")) return OutputType::AR1;
    if(is_equal(L, "AR2")) return OutputType::AR2;
    if(is_equal(L, "AR3")) return OutputType::AR3;
    if(is_equal(L, "MM")) return OutputType::MM;
    if(is_equal(L, "MM1")) return OutputType::MM1;
    if(is_equal(L, "MM2")) return OutputType::MM2;
    if(is_equal(L, "MM3")) return OutputType::MM3;
    if(is_equal(L, "MM4")) return OutputType::MM4;
    if(is_equal(L, "MM5")) return OutputType::MM5;
    if(is_equal(L, "MM6")) return OutputType::MM6;
    if(is_equal(L, "MMR1")) return OutputType::MMR1;
    if(is_equal(L, "MMR2")) return OutputType::MMR2;
    if(is_equal(L, "MMR3")) return OutputType::MMR3;
    if(is_equal(L, "RF")) return OutputType::RF;
    if(is_equal(L, "RF1")) return OutputType::RF1;
    if(is_equal(L, "RF2")) return OutputType::RF2;
    if(is_equal(L, "RF3")) return OutputType::RF3;
    if(is_equal(L, "RF4")) return OutputType::RF4;
    if(is_equal(L, "RF5")) return OutputType::RF5;
    if(is_equal(L, "RF6")) return OutputType::RF6;
    if(is_equal(L, "RM1")) return OutputType::RM1;
    if(is_equal(L, "RM2")) return OutputType::RM2;
    if(is_equal(L, "RM3")) return OutputType::RM3;
    if(is_equal(L, "DF")) return OutputType::DF;
    if(is_equal(L, "DF1")) return OutputType::DF1;
    if(is_equal(L, "DF2")) return OutputType::DF2;
    if(is_equal(L, "DF3")) return OutputType::DF3;
    if(is_equal(L, "DF4")) return OutputType::DF4;
    if(is_equal(L, "DF5")) return OutputType::DF5;
    if(is_equal(L, "DF6")) return OutputType::DF6;
    if(is_equal(L, "DM1")) return OutputType::DM1;
    if(is_equal(L, "DM2")) return OutputType::DM2;
    if(is_equal(L, "DM3")) return OutputType::DM3;
    if(is_equal(L, "IF")) return OutputType::IF;
    if(is_equal(L, "IF1")) return OutputType::IF1;
    if(is_equal(L, "IF2")) return OutputType::IF2;
    if(is_equal(L, "IF3")) return OutputType::IF3;
    if(is_equal(L, "IF4")) return OutputType::IF4;
    if(is_equal(L, "IF5")) return OutputType::IF5;
    if(is_equal(L, "IF6")) return OutputType::IF6;
    if(is_equal(L, "IM1")) return OutputType::IM1;
    if(is_equal(L, "IM2")) return OutputType::IM2;
    if(is_equal(L, "IM3")) return OutputType::IM3;
    if(is_equal(L, "GDF")) return OutputType::GDF;
    if(is_equal(L, "GDF1")) return OutputType::GDF1;
    if(is_equal(L, "GDF2")) return OutputType::GDF2;
    if(is_equal(L, "GDF3")) return OutputType::GDF3;
    if(is_equal(L, "GDF4")) return OutputType::GDF4;
    if(is_equal(L, "GDF5")) return OutputType::GDF5;
    if(is_equal(L, "GDF6")) return OutputType::GDF6;
    if(is_equal(L, "GDM1")) return OutputType::GDM1;
    if(is_equal(L, "GDM2")) return OutputType::GDM2;
    if(is_equal(L, "GDM3")) return OutputType::GDM3;
    if(is_equal(L, "GIF")) return OutputType::GIF;
    if(is_equal(L, "GIF1")) return OutputType::GIF1;
    if(is_equal(L, "GIF2")) return OutputType::GIF2;
    if(is_equal(L, "GIF3")) return OutputType::GIF3;
    if(is_equal(L, "GIF4")) return OutputType::GIF4;
    if(is_equal(L, "GIF5")) return OutputType::GIF5;
    if(is_equal(L, "GIF6")) return OutputType::GIF6;
    if(is_equal(L, "GIM1")) return OutputType::GIM1;
    if(is_equal(L, "GIM2")) return OutputType::GIM2;
    if(is_equal(L, "GIM3")) return OutputType::GIM3;
    if(is_equal(L, "HYDRO")) return OutputType::HYDRO;
    if(is_equal(L, "MISES")) return OutputType::MISES;
    if(is_equal(L, "EEQ")) return OutputType::EEQ;
    if(is_equal(L, "EEEQ")) return OutputType::EEEQ;
    if(is_equal(L, "PEEQ")) return OutputType::PEEQ;
    if(is_equal(L, "KE")) return OutputType::KE;
    if(is_equal(L, "SE")) return OutputType::SE;
    if(is_equal(L, "VE")) return OutputType::VE;
    if(is_equal(L, "NVE")) return OutputType::NVE;
    if(is_equal(L, "K")) return OutputType::K;
    if(is_equal(L, "M")) return OutputType::M;
    if(is_equal(L, "ED")) return OutputType::ED;
    if(is_equal(L, "VD")) return OutputType::VD;
    if(is_equal(L, "SD")) return OutputType::SD;
    if(is_equal(L, "ES")) return OutputType::ES;
    if(is_equal(L, "VS")) return OutputType::VS;
    if(is_equal(L, "SS")) return OutputType::SS;
    if(is_equal(L, "DAMAGE")) return OutputType::DAMAGE;
    if(is_equal(L, "DT")) return OutputType::DT;
    if(is_equal(L, "DC")) return OutputType::DC;
    if(is_equal(L, "PP")) return OutputType::PP;
    if(is_equal(L, "VF")) return OutputType::VF;
    if(is_equal(L, "HIST")) return OutputType::HIST;
    if(is_equal(L, "LITR")) return OutputType::LITR;
    if(is_equal(L, "YF")) return OutputType::YF;
    if(is_equal(L, "BEAME")) return OutputType::BEAME;
    if(is_equal(L, "BEAMS")) return OutputType::BEAMS;
    if(is_equal(L, "AMP")) return OutputType::AMP;

    return OutputType::NL;
}

OutputType to_token(const std::string& L) { return to_token(L.c_str()); }

int to_index(const OutputType config) {
    if(config == OutputType::S11) return 0;
    if(config == OutputType::S22) return 1;
    if(config == OutputType::S33) return 2;
    if(config == OutputType::S12) return 3;
    if(config == OutputType::S23) return 4;
    if(config == OutputType::S13) return 5;

    if(config == OutputType::E11) return 0;
    if(config == OutputType::E22) return 1;
    if(config == OutputType::E33) return 2;
    if(config == OutputType::E12) return 3;
    if(config == OutputType::E23) return 4;
    if(config == OutputType::E13) return 5;

    if(config == OutputType::EE11) return 0;
    if(config == OutputType::EE22) return 1;
    if(config == OutputType::EE33) return 2;
    if(config == OutputType::EE12) return 3;
    if(config == OutputType::EE23) return 4;
    if(config == OutputType::EE13) return 5;

    if(config == OutputType::PE11) return 0;
    if(config == OutputType::PE22) return 1;
    if(config == OutputType::PE33) return 2;
    if(config == OutputType::PE12) return 3;
    if(config == OutputType::PE23) return 4;
    if(config == OutputType::PE13) return 5;

    if(config == OutputType::SP1) return 0;
    if(config == OutputType::SP2) return 1;
    if(config == OutputType::SP3) return 2;

    if(config == OutputType::EP1) return 0;
    if(config == OutputType::EP2) return 1;
    if(config == OutputType::EP3) return 2;

    if(config == OutputType::EEP1) return 0;
    if(config == OutputType::EEP2) return 1;
    if(config == OutputType::EEP3) return 2;

    if(config == OutputType::PEP1) return 0;
    if(config == OutputType::PEP2) return 1;
    if(config == OutputType::PEP3) return 2;

    if(config == OutputType::U1) return 0;
    if(config == OutputType::U2) return 1;
    if(config == OutputType::U3) return 2;
    if(config == OutputType::U4) return 3;
    if(config == OutputType::U5) return 4;
    if(config == OutputType::U6) return 5;
    if(config == OutputType::UR1) return 3;
    if(config == OutputType::UR2) return 4;
    if(config == OutputType::UR3) return 5;

    if(config == OutputType::V1) return 0;
    if(config == OutputType::V2) return 1;
    if(config == OutputType::V3) return 2;
    if(config == OutputType::V4) return 3;
    if(config == OutputType::V5) return 4;
    if(config == OutputType::V6) return 5;
    if(config == OutputType::VR1) return 3;
    if(config == OutputType::VR2) return 4;
    if(config == OutputType::VR3) return 5;

    if(config == OutputType::A1) return 0;
    if(config == OutputType::A2) return 1;
    if(config == OutputType::A3) return 2;
    if(config == OutputType::A4) return 3;
    if(config == OutputType::A5) return 4;
    if(config == OutputType::A6) return 5;
    if(config == OutputType::AR1) return 3;
    if(config == OutputType::AR2) return 4;
    if(config == OutputType::AR3) return 5;

    if(config == OutputType::RF1) return 0;
    if(config == OutputType::RF2) return 1;
    if(config == OutputType::RF3) return 2;
    if(config == OutputType::RF4) return 3;
    if(config == OutputType::RF5) return 4;
    if(config == OutputType::RF6) return 5;
    if(config == OutputType::RM1) return 3;
    if(config == OutputType::RM2) return 4;
    if(config == OutputType::RM3) return 5;

    if(config == OutputType::DF1) return 0;
    if(config == OutputType::DF2) return 1;
    if(config == OutputType::DF3) return 2;
    if(config == OutputType::DF4) return 3;
    if(config == OutputType::DF5) return 4;
    if(config == OutputType::DF6) return 5;
    if(config == OutputType::DM1) return 3;
    if(config == OutputType::DM2) return 4;
    if(config == OutputType::DM3) return 5;

    if(config == OutputType::IF1) return 0;
    if(config == OutputType::IF2) return 1;
    if(config == OutputType::IF3) return 2;
    if(config == OutputType::IF4) return 3;
    if(config == OutputType::IF5) return 4;
    if(config == OutputType::IF6) return 5;
    if(config == OutputType::IM1) return 3;
    if(config == OutputType::IM2) return 4;
    if(config == OutputType::IM3) return 5;

    return 0;
}

const char* to_category(const OutputType L) {
    if(OutputType::S == L) return "S";
    if(OutputType::S11 == L) return "S";
    if(OutputType::S12 == L) return "S";
    if(OutputType::S13 == L) return "S";
    if(OutputType::S22 == L) return "S";
    if(OutputType::S23 == L) return "S";
    if(OutputType::S33 == L) return "S";
    if(OutputType::E == L) return "E";
    if(OutputType::E11 == L) return "E";
    if(OutputType::E12 == L) return "E";
    if(OutputType::E13 == L) return "E";
    if(OutputType::E22 == L) return "E";
    if(OutputType::E23 == L) return "E";
    if(OutputType::E33 == L) return "E";
    if(OutputType::EE == L) return "EE";
    if(OutputType::EE11 == L) return "EE";
    if(OutputType::EE12 == L) return "EE";
    if(OutputType::EE13 == L) return "EE";
    if(OutputType::EE22 == L) return "EE";
    if(OutputType::EE23 == L) return "EE";
    if(OutputType::EE33 == L) return "EE";
    if(OutputType::PE == L) return "PE";
    if(OutputType::PE11 == L) return "PE";
    if(OutputType::PE12 == L) return "PE";
    if(OutputType::PE13 == L) return "PE";
    if(OutputType::PE22 == L) return "PE";
    if(OutputType::PE23 == L) return "PE";
    if(OutputType::PE33 == L) return "PE";
    if(OutputType::SP == L) return "SP";
    if(OutputType::SP1 == L) return "SP";
    if(OutputType::SP2 == L) return "SP";
    if(OutputType::SP3 == L) return "SP";
    if(OutputType::EP == L) return "EP";
    if(OutputType::EP1 == L) return "EP";
    if(OutputType::EP2 == L) return "EP";
    if(OutputType::EP3 == L) return "EP";
    if(OutputType::EEP == L) return "EEP";
    if(OutputType::EEP1 == L) return "EEP";
    if(OutputType::EEP2 == L) return "EEP";
    if(OutputType::EEP3 == L) return "EEP";
    if(OutputType::PEP == L) return "PEP";
    if(OutputType::PEP1 == L) return "PEP";
    if(OutputType::PEP2 == L) return "PEP";
    if(OutputType::PEP3 == L) return "PEP";
    if(OutputType::U == L) return "U";
    if(OutputType::U1 == L) return "U";
    if(OutputType::U2 == L) return "U";
    if(OutputType::U3 == L) return "U";
    if(OutputType::U4 == L) return "U";
    if(OutputType::U5 == L) return "U";
    if(OutputType::U6 == L) return "U";
    if(OutputType::UR1 == L) return "U";
    if(OutputType::UR2 == L) return "U";
    if(OutputType::UR3 == L) return "U";
    if(OutputType::V == L) return "V";
    if(OutputType::V1 == L) return "V";
    if(OutputType::V2 == L) return "V";
    if(OutputType::V3 == L) return "V";
    if(OutputType::V4 == L) return "V";
    if(OutputType::V5 == L) return "V";
    if(OutputType::V6 == L) return "V";
    if(OutputType::VR1 == L) return "V";
    if(OutputType::VR2 == L) return "V";
    if(OutputType::VR3 == L) return "V";
    if(OutputType::A == L) return "A";
    if(OutputType::A1 == L) return "A";
    if(OutputType::A2 == L) return "A";
    if(OutputType::A3 == L) return "A";
    if(OutputType::A4 == L) return "A";
    if(OutputType::A5 == L) return "A";
    if(OutputType::A6 == L) return "A";
    if(OutputType::AR1 == L) return "A";
    if(OutputType::AR2 == L) return "A";
    if(OutputType::AR3 == L) return "A";
    if(OutputType::MM == L) return "MM";
    if(OutputType::MM1 == L) return "MM";
    if(OutputType::MM2 == L) return "MM";
    if(OutputType::MM3 == L) return "MM";
    if(OutputType::MM4 == L) return "MM";
    if(OutputType::MM5 == L) return "MM";
    if(OutputType::MM6 == L) return "MM";
    if(OutputType::MMR1 == L) return "MM";
    if(OutputType::MMR2 == L) return "MM";
    if(OutputType::MMR3 == L) return "MM";
    if(OutputType::RF == L) return "RF";
    if(OutputType::RF1 == L) return "RF";
    if(OutputType::RF2 == L) return "RF";
    if(OutputType::RF3 == L) return "RF";
    if(OutputType::RF4 == L) return "RF";
    if(OutputType::RF5 == L) return "RF";
    if(OutputType::RF6 == L) return "RF";
    if(OutputType::RM1 == L) return "RF";
    if(OutputType::RM2 == L) return "RF";
    if(OutputType::RM3 == L) return "RF";
    if(OutputType::DF == L) return "DF";
    if(OutputType::DF1 == L) return "DF";
    if(OutputType::DF2 == L) return "DF";
    if(OutputType::DF3 == L) return "DF";
    if(OutputType::DF4 == L) return "DF";
    if(OutputType::DF5 == L) return "DF";
    if(OutputType::DF6 == L) return "DF";
    if(OutputType::DM1 == L) return "DF";
    if(OutputType::DM2 == L) return "DF";
    if(OutputType::DM3 == L) return "DF";
    if(OutputType::IF == L) return "IF";
    if(OutputType::IF1 == L) return "IF";
    if(OutputType::IF2 == L) return "IF";
    if(OutputType::IF3 == L) return "IF";
    if(OutputType::IF4 == L) return "IF";
    if(OutputType::IF5 == L) return "IF";
    if(OutputType::IF6 == L) return "IF";
    if(OutputType::IM1 == L) return "IF";
    if(OutputType::IM2 == L) return "IF";
    if(OutputType::IM3 == L) return "IF";
    if(OutputType::GDF == L) return "GDF";
    if(OutputType::GDF1 == L) return "GDF";
    if(OutputType::GDF2 == L) return "GDF";
    if(OutputType::GDF3 == L) return "GDF";
    if(OutputType::GDF4 == L) return "GDF";
    if(OutputType::GDF5 == L) return "GDF";
    if(OutputType::GDF6 == L) return "GDF";
    if(OutputType::GDM1 == L) return "GDM";
    if(OutputType::GDM2 == L) return "GDM";
    if(OutputType::GDM3 == L) return "GDM";
    if(OutputType::GIF == L) return "GIF";
    if(OutputType::GIF1 == L) return "GIF";
    if(OutputType::GIF2 == L) return "GIF";
    if(OutputType::GIF3 == L) return "GIF";
    if(OutputType::GIF4 == L) return "GIF";
    if(OutputType::GIF5 == L) return "GIF";
    if(OutputType::GIF6 == L) return "GIF";
    if(OutputType::GIM1 == L) return "GIF";
    if(OutputType::GIM2 == L) return "GIF";
    if(OutputType::GIM3 == L) return "GIF";
    if(OutputType::HYDRO == L) return "HYDRO";
    if(OutputType::MISES == L) return "MISES";
    if(OutputType::EEQ == L) return "EEQ";
    if(OutputType::EEEQ == L) return "EEEQ";
    if(OutputType::PEEQ == L) return "PEEQ";
    if(OutputType::KE == L) return "KE";
    if(OutputType::SE == L) return "SE";
    if(OutputType::VE == L) return "VE";
    if(OutputType::NVE == L) return "NVE";
    if(OutputType::K == L) return "K";
    if(OutputType::M == L) return "M";
    if(OutputType::ED == L) return "ED";
    if(OutputType::VD == L) return "VD";
    if(OutputType::SD == L) return "SD";
    if(OutputType::ES == L) return "ES";
    if(OutputType::VS == L) return "VS";
    if(OutputType::SS == L) return "SS";
    if(OutputType::DAMAGE == L) return "DAMAGE";
    if(OutputType::DT == L) return "DT";
    if(OutputType::DC == L) return "DC";
    if(OutputType::PP == L) return "PP";
    if(OutputType::VF == L) return "VF";
    if(OutputType::HIST == L) return "HIST";
    if(OutputType::LITR == L) return "LITR";
    if(OutputType::YF == L) return "YF";
    if(OutputType::BEAME == L) return "BEAME";
    if(OutputType::BEAMS == L) return "BEAMS";
    if(OutputType::AMP == L) return "AMP";
    if(OutputType::NL == L) return "NL";

    return "NL";
}
