if (BUILD_SHARED AND USE_MKL)
    if (EXISTS ${MKLROOT}/lib/intel64)
        link_directories(${MKLROOT}/lib/intel64)
    else (EXISTS ${MKLROOT}/lib/intel64)
        link_directories(${MKLROOT}/lib)
    endif ()
    if (MKLROOT MATCHES "(oneapi|oneAPI)")
        if (COMPILER_IDENTIFIER MATCHES "linux")
            find_library(IOMPPATH iomp5 PATHS
                    ${MKLROOT}/../../compiler/latest/linux/compiler/lib/intel64_lin
                    ${MKLROOT}/../../compiler/latest/lib
                    REQUIRED
            )
            get_filename_component(IOMPPATH ${IOMPPATH} DIRECTORY)
            link_directories(${IOMPPATH})
            if (USE_INTEL_OPENMP)
                link_libraries(mkl_intel_lp64 mkl_intel_thread mkl_core iomp5 m)
            else ()
                link_libraries(mkl_intel_lp64 mkl_gnu_thread mkl_core gomp m)
            endif ()
            if (USE_MPI)
                link_libraries(mkl_scalapack_lp64)
                if (USE_INTEL_MPI)
                    link_libraries(mkl_blacs_intelmpi_lp64 impi impicxx)
                else ()
                    link_libraries(mkl_blacs_openmpi_lp64 mpi_mpifh mpi)
                endif ()
            endif ()
        elseif (COMPILER_IDENTIFIER MATCHES "win")
            link_libraries(mkl_rt)
            if (USE_MPI)
                link_libraries(impi impicxx)
            endif ()
        elseif (COMPILER_IDENTIFIER MATCHES "vs")
            find_library(IOMPPATH libiomp5md PATHS
                    ${MKLROOT}/../../compiler/latest/windows/compiler/lib/intel64_win
                    ${MKLROOT}/../../compiler/latest/lib
                    REQUIRED
            )
            get_filename_component(IOMPPATH ${IOMPPATH} DIRECTORY)
            link_directories(${IOMPPATH})
            set(DSUFIX "_dll")
            if (BUILD_MULTITHREAD)
                link_libraries(mkl_intel_lp64${DSUFIX} mkl_tbb_thread${DSUFIX} mkl_core${DSUFIX})
            else ()
                link_libraries(mkl_intel_lp64${DSUFIX} mkl_intel_thread${DSUFIX} mkl_core${DSUFIX} libiomp5md)
            endif ()
            if (USE_MPI)
                link_libraries(mkl_scalapack_lp64 mkl_blacs_intelmpi_lp64 impi impicxx)
            endif ()
        endif ()
    endif ()
else ()
    if (NOT COMPILER_IDENTIFIER MATCHES "vs") # GCC OR CLANG COMPILER
    find_library(HAS_QUADMATH quadmath)
    if (HAS_QUADMATH)
        link_libraries(quadmath)
    endif ()
    link_libraries(pthread gfortran openblas)
    else () # MSVC COMPILER
        if (USE_MPI)
            link_libraries(mkl_scalapack_lp64 mkl_blacs_intelmpi_lp64)
        else ()
            link_libraries(libopenblas)
        endif ()
    endif ()
endif ()
